#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Dec 23 14:56:41 2020

@author: ginodaurini
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#%matplotlib inline - возвращает ошибку, не понимаю почему
#%config InlineBackend.figure_format = 'svg' - аналогично предыдущему
from sklearn.datasets import load_boston
boston = load_boston()
data = boston["data"]
from sklearn.model_selection import train_test_split
feature_names = boston["feature_names"]
X = pd.DataFrame(data, columns=feature_names)
X.head()
print(X)
target = boston["target"]
y = pd.DataFrame(target, columns=["price"])
y.head()
print(y)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train_scaled = pd.DataFrame(scaler.fit_transform(X_train), columns=X_train.columns)
X_test_scaled = pd.DataFrame(scaler.transform(X_test), columns=X_test.columns)
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, learning_rate=250, random_state=42)
X_train_tsne = tsne.fit_transform(X_train_scaled)
plt.scatter(X_train_tsne[:, 0], X_train_tsne[:, 1])
plt.show()

from sklearn.cluster import KMeans
model = KMeans(n_clusters=3, random_state=42, max_iter=100)
labels_train = model.fit_predict(X_train_scaled)
plt.scatter(X_train_tsne[:, 0], X_train_tsne[:, 1], c=labels_train)
plt.show()
print('First_claster: ', y_train[labels_train == 0].mean())
print('Second_claster:', y_train[labels_train == 1].mean())
print('Third_claster:', y_train[labels_train == 2].mean())
print('First_claster: ', X_train['CRIM'][labels_train == 0].mean())
print('Second_claster:', X_train['CRIM'][labels_train == 1].mean())
print('Third_claster:', X_train['CRIM'][labels_train == 2].mean())

scaler = StandardScaler()
X_train_scaled = pd.DataFrame(scaler.fit_transform(X_train), columns=X_train.columns)
X_test_scaled = pd.DataFrame(scaler.transform(X_test), columns=X_test.columns)
X_test_tsne = tsne.fit_transform(X_test_scaled)
labels_test = model.fit_predict(X_test_scaled)
plt.scatter(X_test_tsne[:, 0], X_test_tsne[:, 1], c=labels_test)
plt.show()
print('First_claster: ', X_test['CRIM'][labels_test == 0].mean())
print('Second_claster:', X_test['CRIM'][labels_test== 1].mean())
print('Third_claster:', X_test['CRIM'][labels_test== 2].mean())
